-- SPDX-FileCopyrightText: 2024 - 2025 Lukas Heindl
--
-- SPDX-License-Identifier: GPL-3.0-or-later

local lester = require 'lester'

local describe = lester.describe
local it       = lester.it
local expect   = lester.expect

local pathutil_unix = require 'src_lua.texrunner.pathutil_unix'
local pathutil_windows = require 'src_lua.texrunner.pathutil_windows'

describe('pathutil_unix', function()
	describe('basename', function()
		it([[/path/to/file]], function()
			expect.equal(pathutil_unix.basename("/path/to/file"), "file")
		end)
		it([[/path/to/directory/]], function()
			expect.equal(pathutil_unix.basename("/path/to/directory/"), "directory")
		end)
		it([[/file]], function()
			expect.equal(pathutil_unix.basename("/file"), "file")
		end)
		it([[file]], function()
			expect.equal(pathutil_unix.basename("file"), "file")
		end)
	end)
	describe('dirname', function()
		it([[/path/to/file]], function()
			expect.equal(pathutil_unix.dirname("/path/to/file"), "/path/to")
		end)
		it([[/path/to/directory/]], function()
			expect.equal(pathutil_unix.dirname("/path/to/directory/"), "/path/to/directory")
		end)
		it([[/file]], function()
			expect.equal(pathutil_unix.dirname("/file"), "/")
		end)
		it([[file]], function()
			expect.equal(pathutil_unix.dirname("file"), ".")
		end)
	end)
	describe('parentdir', function()
		it([[/path/to/file]], function()
			expect.equal(pathutil_unix.parentdir("/path/to/file"), "/path/to")
		end)
		it([[/path/to/directory/]], function()
			expect.equal(pathutil_unix.parentdir("/path/to/directory/"), "/path/to")
		end)
		it([[/file]], function()
			expect.equal(pathutil_unix.parentdir("/file"), "/")
		end)
		it([[file]], function()
			expect.equal(pathutil_unix.parentdir("file"), ".")
		end)
	end)
	describe('ext', function()
		it([[/path/to/file.ext]], function()
			expect.equal(pathutil_unix.ext("/path/to/file.ext"), "ext")
		end)
		it([[/path/t.o/file]], function()
			expect.equal(pathutil_unix.ext("/path/t.o/file"), "")
		end)
		it([[file.ext]], function()
			expect.equal(pathutil_unix.ext("file.ext"), "ext")
		end)
		it([[file.e.xt]], function()
			expect.equal(pathutil_unix.ext("file.e.xt"), "xt")
		end)
		it([[file.ext.]], function()
			expect.equal(pathutil_unix.ext("file.ext."), "")
		end)
		it([[file]], function()
			expect.equal(pathutil_unix.ext("file"), "")
		end)
	end)
	describe('trimext', function()
		it([[/path/to/file.ext]], function()
			expect.equal(pathutil_unix.trimext("/path/to/file.ext"), "/path/to/file")
		end)
		it([[/path/t.o/file]], function()
			expect.equal(pathutil_unix.trimext("/path/t.o/file"), "/path/t.o/file")
		end)
		it([[file.ext]], function()
			expect.equal(pathutil_unix.trimext("file.ext"), "file")
		end)
		it([[file.e.xt]], function()
			expect.equal(pathutil_unix.trimext("file.e.xt"), "file.e")
		end)
		it([[file.ext.]], function()
			expect.equal(pathutil_unix.trimext("file.ext."), "file.ext")
		end)
		it([[file]], function()
			expect.equal(pathutil_unix.trimext("file"), "file")
		end)
	end)
	describe('replaceext', function()
		it([[/path/to/file.ext", "tor]], function()
			expect.equal(pathutil_unix.replaceext("/path/to/file.ext", "tor"), "/path/to/file.tor")
		end)
		it([[/path/t.o/file", "tor]], function()
			expect.equal(pathutil_unix.replaceext("/path/t.o/file", "tor"), "/path/t.o/file.tor")
		end)
		it([["file.ext", "tor"]], function()
			expect.equal(pathutil_unix.replaceext("file.ext", "tor"), "file.tor")
		end)
		it([["file.e.xt", "tor"]], function()
			expect.equal(pathutil_unix.replaceext("file.e.xt", "tor"), "file.e.tor")
		end)
		it([["file.ext.", "tor"]], function()
			expect.equal(pathutil_unix.replaceext("file.ext.", "tor"), "file.ext.tor")
		end)
		it([["file", "tor"]], function()
			expect.equal(pathutil_unix.replaceext("file", "tor"), "file.tor")
		end)
	end)
	describe('joinpath', function()
		it([[/path/", "to", "somewhere"]], function()
			expect.equal(pathutil_unix.join("/path/", "to", "somewhere"), "/path/to/somewhere")
		end)
		it([[/path/", "to", "somewhere", ".."]], function()
			expect.equal(pathutil_unix.join("/path/", "to", "somewhere", ".."), "/path/to")
		end)
		it([[/path/", "to", "somewhere", "..", "elsewhere"]], function()
			expect.equal(pathutil_unix.join("/path/", "to", "somewhere", "..", "elsewhere"), "/path/to/elsewhere")
		end)
		it([[/path/", "to", "./somewhere.txt"]], function()
			expect.equal(pathutil_unix.join("/path/", "to", "./somewhere.txt"), "/path/to/somewhere.txt")
		end)
	end)
	describe('abspath', function()
		it([["world.txt", "/hello"]], function()
			expect.equal(pathutil_unix.abspath("world.txt", "/hello"), "/hello/world.txt")
		end)
		it([["/world.txt", "/hello"]], function()
			expect.equal(pathutil_unix.abspath("/world.txt", "/hello"), "/world.txt")
		end)
	end)
end)


describe('pathutil_windows', function()
	describe('joinpath', function()
		it([[/path/to\somewhere]], function()
			expect.equal(pathutil_windows.join("/path/", "to", "somewhere"), [[/path/to\somewhere]])
		end)
		it([[/path/to\somewhere\..]], function()
			expect.equal(pathutil_windows.join("/path/", "to", "somewhere", ".."), [[/path/to]])
		end)
		it([[/path/to\somewhere\..\elsewhere]], function()
			expect.equal(pathutil_windows.join("/path/", "to", "somewhere", "..", "elsewhere"), [[/path/to\elsewhere]])
		end)
		it([[/path/to/somewhere.txt]], function()
			expect.equal(pathutil_windows.join("/path/", "to", "./somewhere.txt"), [[/path/to\somewhere.txt]])
		end)
	end)
	describe('basename', function()
		it([[/path/to/file]], function()
			expect.equal(pathutil_windows.basename("/path/to/file"), "file")
		end)
		it([[/path/to/directory/]], function()
			expect.equal(pathutil_windows.basename("/path/to/directory/"), "directory")
		end)
		it([[c:\path\to/directory\]], function()
			expect.equal(pathutil_windows.basename([[c:\path\to/directory\]]), "directory")
		end)
		it([[/file]], function()
			expect.equal(pathutil_windows.basename("/file"), "file")
		end)
		it([[file]], function()
			expect.equal(pathutil_windows.basename("file"), "file")
		end)
	end)
	describe('dirname', function()
		it([[/path/to/file]], function()
			expect.equal(pathutil_windows.dirname("/path/to/file"), "/path/to")
		end)
		it([[/path/to/directory/]], function()
			expect.equal(pathutil_windows.dirname("/path/to/directory/"), "/path/to/directory")
		end)
		it([[c:/path\to/file]], function()
			expect.equal(pathutil_windows.dirname([[c:/path\to/file]]), [[c:/path\to]])
		end)
		it([[/file]], function()
			expect.equal(pathutil_windows.dirname("/file"), "/")
		end)
		it([[file]], function()
			expect.equal(pathutil_windows.dirname("file"), ".")
		end)
	end)
	describe('parentdir', function()
		it([[/path/to/file]], function()
			expect.equal(pathutil_windows.parentdir("/path/to/file"), "/path/to")
		end)
		it([[/path/to/directory/]], function()
			expect.equal(pathutil_windows.parentdir("/path/to/directory/"), "/path/to")
		end)
		it([[/file]], function()
			expect.equal(pathutil_windows.parentdir("/file"), "/")
		end)
		it([["file]], function()
			expect.equal(pathutil_windows.parentdir("file"), ".")
		end)
	end)
	describe('trimext', function()
		it([[/path/to/file.ext]], function()
			expect.equal(pathutil_windows.trimext("/path/to/file.ext"), "/path/to/file")
		end)
		it([[/path/t.o/file]], function()
			expect.equal(pathutil_windows.trimext("/path/t.o/file"), "/path/t.o/file")
		end)
		it([[c:/path/t.o\file]], function()
			expect.equal(pathutil_windows.trimext([[c:/path/t.o\file]]), [[c:/path/t.o\file]])
		end)
		it([[file.ext]], function()
			expect.equal(pathutil_windows.trimext("file.ext"), "file")
		end)
		it([[file.e.xt]], function()
			expect.equal(pathutil_windows.trimext("file.e.xt"), "file.e")
		end)
		it([[file.ext.]], function()
			expect.equal(pathutil_windows.trimext("file.ext."), "file.ext")
		end)
		it([[file]], function()
			expect.equal(pathutil_windows.trimext("file"), "file")
		end)
	end)
	describe('ext', function()
		it([[/path/to/file.ext]], function()
			expect.equal(pathutil_windows.ext("/path/to/file.ext"), "ext")
		end)
		it([[/path/t.o/file]], function()
			expect.equal(pathutil_windows.ext("/path/t.o/file"), "")
		end)
		it([[c:/path/t.o\file]], function()
			expect.equal(pathutil_windows.ext([[c:/path/t.o\file]]), "")
		end)
		it([[t("file.ext]], function()
			expect.equal(pathutil_windows.ext("file.ext"), "ext")
		end)
		it([[file.e.xt]], function()
			expect.equal(pathutil_windows.ext("file.e.xt"), "xt")
		end)
		it([[file.ext.]], function()
			expect.equal(pathutil_windows.ext("file.ext."), "")
		end)
		it([[file]], function()
			expect.equal(pathutil_windows.ext("file"), "")
		end)
	end)
	describe('replaceext', function()
		it([["/path/to/file.ext", "tor]], function()
			expect.equal(pathutil_windows.replaceext("/path/to/file.ext", "tor"), "/path/to/file.tor")
		end)
		it([["/path/t.o/file", "tor]], function()
			expect.equal(pathutil_windows.replaceext("/path/t.o/file", "tor"), "/path/t.o/file.tor")
		end)
		it([["c:/path/t.o\file", "tor]], function()
			expect.equal(pathutil_windows.replaceext([[c:/path/t.o\file]], "tor"), [[c:/path/t.o\file.tor]])
		end)
		it([["file.ext", "tor]], function()
			expect.equal(pathutil_windows.replaceext("file.ext", "tor"), "file.tor")
		end)
		it([["file.e.xt", "tor"]], function()
			expect.equal(pathutil_windows.replaceext("file.e.xt", "tor"), "file.e.tor")
		end)
		it([["file.ext.", "tor"]], function()
			expect.equal(pathutil_windows.replaceext("file.ext.", "tor"), "file.ext.tor")
		end)
		it([["file", "tor"]], function()
			expect.equal(pathutil_windows.replaceext("file", "tor"), "file.tor")
		end)
	end)
end)
